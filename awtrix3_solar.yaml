---
blueprint:
  name: AWTRIX Solar Energy Monitor (AWTRIX 3) – W/kW + custom refresh + notify/app
  description: >
    Periodically shows solar power on AWTRIX 3.
    Choose display mode: transient notify (popup) or app-in-rotation (with short lifetime).
    Icons: 54156 (green), 50557 (white dyn), 50546 (static).

  domain: automation
  input:
    awtrix:
      name: AWTRIX Device
      description: Select your AWTRIX 3 device (MQTT)
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true

    power_source:
      name: Power Sensor
      selector:
        entity:
          domain: [sensor]
          multiple: false

    sensor_unit:
      name: Sensor unit
      selector:
        select:
          options: [W, kW]
      default: W

    threshold_high:
      name: Threshold for high solar production (W)
      selector:
        number: {min: 0, max: 100000, unit_of_measurement: Watt, mode: slider}
      default: 400

    threshold_low:
      name: Threshold for low solar production (W)
      selector:
        number: {min: 0, max: 100000, unit_of_measurement: Watt, mode: slider}
      default: 100

    skip_if_zero_watts:
      name: Hide when 0 W
      selector: {boolean:}
      default: false

    skip_during_night_hours:
      name: Hide during night time
      selector: {boolean:}
      default: false

    night_starts_after_time:
      name: Night start
      default: "00:00:00"
      selector: {time: {}}

    night_ends_after_time:
      name: Night end
      default: "00:00:00"
      selector: {time: {}}

    refresh_minutes:
      name: Refresh pattern (minutes)
      description: |
        Wzór dla `minutes:` w time_pattern. Przykłady:
        - "/5"  → co 5 minut
        - "0,15,30,45" → co kwadrans
      selector: {text: {multiline: false}}
      default: "/5"

    display_mode:
      name: Display mode
      description: notify = popup jednorazowy; app = krótko do rotacji (lifetime)
      selector:
        select:
          options:
            - notify
            - app
      default: notify

    show_duration_s:
      name: Show duration (seconds)
      description: Ile sekund ma być widoczny komunikat.
      selector:
        number: {min: 1, max: 120, unit_of_measurement: s, mode: slider}
      default: 8

    app_lifetime_s:
      name: (app) Lifetime in queue (seconds)
      description: Jak długo appka „żyje” w kolejce (po 1 wyświetleniu wygaśnie).
      selector:
        number: {min: 1, max: 300, unit_of_measurement: s, mode: slider}
      default: 20

    app_repeat:
      name: (app) Repeat count
      description: Ile razy pokazać w jednej publikacji (zwykle 1).
      selector:
        number: {min: 1, max: 5, mode: slider}
      default: 1

mode: single

variables:
  device_ids: !input awtrix

  # z HA pobieramy device_topic każdej wybranej „żarówki”
  devices_base_topics: >-
    {%- macro get_device_topic(device_id) -%}
    {{ states((device_entities(device_id) | select('search','device_topic') | list)[0]) }}
    {%- endmacro -%}
    {%- set ns = namespace(devs=[]) -%}
    {%- for device_id in device_ids -%}
      {%- set dev = get_device_topic(device_id) | replace(' ','') -%}
      {%- set ns.devs = ns.devs + [ dev ] -%}
    {%- endfor -%}
    {{ ns.devs }}

  power_sensor: !input power_source
  sensor_unit: !input sensor_unit

  raw_power: "{{ states[power_sensor].state | float(0) | abs }}"
  power_level: >-
    {% if sensor_unit == 'kW' %}
      {{ (raw_power * 1000) | round(0) }}
    {% else %}
      {{ raw_power | round(0) }}
    {% endif %}

  threshold_low: !input threshold_low
  threshold_high: !input threshold_high

  power_level_icon: >-
    {%- if power_level | float > threshold_high | float -%}54156
    {%- elif power_level | float > threshold_low | float -%}50557
    {%- else -%}50546
    {%- endif -%}

  power_level_color: >-
    {%- if power_level | float > threshold_high | float -%}#04FE04
    {%- elif power_level | float > threshold_low | float -%}#FCFEFC
    {%- else -%}#FF4E1A
    {%- endif -%}

  power_level_text: >-
    {%- if (power_level | float) >= 1000 -%}
      {{ ((power_level | float) / 1000) | round(1) }} kW
    {%- else -%}
      {{ (power_level | float) | round(0) }} W
    {%- endif -%}

  skip_if_zero_watts: !input skip_if_zero_watts
  skip_during_night_hours: !input skip_during_night_hours

  display_mode: !input display_mode
  show_duration_s: !input show_duration_s
  app_lifetime_s: !input app_lifetime_s
  app_repeat: !input app_repeat

  # wybór topicu wg trybu
  topic_suffix: >-
    {% if display_mode == 'notify' %}/notify{% else %}/custom/solar_power{% endif %}
  devices_topics: >-
    {%- set ns = namespace(list=[]) -%}
    {%- for base in devices_base_topics -%}
      {%- set _ = ns.list.append(base ~ topic_suffix) -%}
    {%- endfor -%}
    {{ ns.list }}

  # payloady dla 2 trybów: notify vs app
  payload_notify: >-
    {{
      {
        "icon": power_level_icon,
        "text": power_level_text,
        "color": power_level_color,
        "duration": show_duration_s,  # ile sekund widoczny popup
        "repeat": 1
      } | tojson
    }}

  payload_app: >-
    {{
      {
        "icon": power_level_icon,
        "text": power_level_text,
        "color": power_level_color,
        "duration": show_duration_s,  # czas pojedynczego wyświetlenia
        "repeat": app_repeat,         # ile razy w tej publikacji
        "lifetime": app_lifetime_s    # jak długo appka ma żyć w kolejce
      } | tojson
    }}

  payload_final: >-
    {% if display_mode == 'notify' %}
      {{ payload_notify }}
    {% else %}
      {{ payload_app }}
    {% endif %}

  night_start: !input night_starts_after_time
  night_end: !input night_ends_after_time

trigger:
  - platform: time_pattern
    minutes: !input refresh_minutes

condition: []

action:
  - choose:
      - alias: "Skipping"
        conditions:
          - condition: template
            value_template: >
              {% set now_time = now().strftime("%H:%M") %}
              {{ (skip_during_night_hours and ((now_time < night_end) or (now_time > night_start))) or
                 (skip_if_zero_watts and (power_level | float == 0)) }}
        sequence:
          - repeat:
              for_each: "{{ devices_topics }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}"
                    payload: '{}'

      - alias: "Show (notify/app)"
        conditions: []
        sequence:
          - repeat:
              for_each: "{{ devices_topics }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}"
                    payload: "{{ payload_final }}"
